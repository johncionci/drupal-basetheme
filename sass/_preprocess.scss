// @file Preprocess
// This file contains various SASS functionality such as Extends, Placeholders, & Mixins.
// @link krasimirtsonev.com/blog/article/SASS-mixins-extends-and-placeholders-differences-use-cases


// EXTENDS

// PLACEHOLDERS

// MIXINS

// Clearfix
//
// @usage
// .headerclass {
// 	@include clearfix()
// }
//
// @link http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

// Zero
// Remove all padding & margins
//
// @usage
// .header {
// 	@inlcude zero();
// }
@mixin zero() {
	margin: 0;
	padding: 0;
}

// Zero List
// Remove margin, padding, and list styles from lists
//
// @usage
// ul {
// 	@inlcude zero-list()
// }
@mixin zero-list() {
	@include zero;
	list-style: none;
	li {
		@include zero;
		list-style: none;
	}
}

// Text Decorations
// Supply a base link color and a hover link color
// Remove the underline, until hover
//
// $link_color - the initial link color
// $hover_color - the links hover color
//
// @usage
// a {
// 	@include text-decoration(#fff,#000);
// }
@mixin text-decoration($link_color, $hover_color) {
	color: $link_color;
	text-decoration: none;
	&:hover {
		color: $hover_color;
		text-decoration: underline;
	}
}

// Gradient
// Simple gradient mixin with IE fallback
//
// $from - the starting color
// $to - the ending color
//
// @usage
// .headerclass {
// 	@include gradient(fff,000);
// }
@mixin gradient($from, $to) {
	background-color: $from; // fallback/image non-cover color
	background-image: -moz-linear-gradient($from, $to); // Firefox 3.6+
	background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to)); // Safari 4+, Chrome 1+
	background-image: -webkit-linear-gradient($from, $to); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient($from, $to); // Opera 11.10+
	// extras from http://www.colorzilla.com/gradient-editor/
	background: -ms-linear-gradient(top,  $from 0%,$to 100%); // IE10+
	background: linear-gradient(to bottom,  $from 0%,$to 100%); // W3C
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=#{$from}, endColorstr=#{$to},GradientType=0 ); // IE6-9
	.ie9 & {
		filter: none;
	}
}

// Border Radius
// Simple border-radius mixin with browser prefixes
//
// @usage
// .box {
// 	@include border-radius(10px);
// }
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	-o-border-radius: $radius;
	border-radius: $radius;
}

// Responsive Media Queries
// Add media query breakpoints to a mixin so we can use them inline
// instead of extra files. When adding break points with numbers please
// put in the pixel number without px and then they will automatically
// be converted into ems.
//
// @usage
// 	#page {
// 		width: 90%;
// 		@include mq(mobile) { width: 80%; }
// 	}
//
//	#page {
// 		width: 90%;
// 		@include min-mq(745) { width: 80%; }
// 	}
//
//	#page {
// 		width: 90%;
// 		@include mq(745, 900) { width: 80%; }
// 	}
//
// @param - $breakpoint1, $breakpoint2
//
// @required Sass 3.2
//
// @link http://css-tricks.com/media-queries-sass-3-2-and-codekit/
// @link http://css-tricks.com/conditional-media-query-mixins/
@mixin mq($breakpoint1: nil, $breakpoint2: nil) {

	@if type-of($breakpoint1) != number {
		@if $breakpoint1 == large-display {
			@media only screen and (min-width: 1281/$base-font + em) { @content; }
		}
		@else if $breakpoint1 == tablet {
			@media only screen and (min-width: 641/$base-font + em) and (max-width : 1023/$base-font + em) { @content; }
		}
		@else if $breakpoint1 == mobile {
			@media only screen and (max-width: 641/$base-font + em) { @content; }
		}
		@else if $breakpoint1 == mobile-portrait {
			@media only screen and (max-width: 320/$base-font + em) { @content; }
		}
	}
	@else {
		$break1: $breakpoint1/$base-font;
		$break2: $breakpoint2/$base-font;

		@if $breakpoint2 == nil {
			@media only screen and (max-width: $break1 + em) { @content; }
		}
		@else {
			@media only screen and (min-width: $break1 + em) and (max-width: $break2 + em) { @content; }
		}
	}
}

@mixin min-mq($breakpoint: nil) {
	$break: $breakpoint/$base-font;

	@media only screen and (min-width: $break + em) {
		@content;
	}
}